아이디어 구상은 쉬웠다 
모든 문자의 개수를 센 후에 케이스별로 뽑아서 예외의 경우에는 -2*10**x 를 했다
해결은 빠르게 되었지만 그렇게 효율적인 코딩이라는 이야기는 나오지 않았다
그래서 해답을 보았더니 어떤분은 일단 딕셔너리에 넣었다
어제부터 느끼는 것이지만 딕셔너리가 서로 페어가 되어있는 문제를 풀 때 아주 효율적이라는 생각이 든다
c로 처음에 코딩을 하고 파이썬과 자바를 많이 경험해보지 않은 나는 아직 딕셔너리를 사용하는게 익숙하지 않다
어쨌든 그분은 리턴할 변수 하나 그리고 어차피 작은 것에서 큰쪽으로 가니 그 기준이 되는 변수 하나를 만들었다
스트링을 뒤집은 후에 비교하면서 예외가 아닐경우에는 더하고 예외의 경우에는 그 수 만큼 빼주었다
참 효율적인 코딩이라고 생각했다

내코딩 : 
class Solution(object):
    def romanToInt(self, s):
        """
        :type s: str
        :rtype: int
        """
        
        one = s.count('I')
        five = s.count('V')
        ten = s.count('X')
        fifty = s.count('L')
        hundred = s.count('C')
        fivehundred = s.count('D')
        thousand = s.count('M')
        
        num = one+five*5+ten*10+fifty*50+hundred*100+fivehundred*500+thousand*1000
        
        if 'IV' in s:
            num = num - 2
        if 'IX' in s:
            num = num - 2
        if 'XL' in s:
            num = num - 20
        if 'XC' in s:
            num = num - 20
        if 'CD' in s:
            num = num - 200
        if 'CM' in s:
            num = num - 200
        return num
        
        
 해답지 : 
 def romanToInt(self, s):
        retInt = 0
        localMax = 0
        romanDict = {"I": 1,"V": 5,"X": 10,"L": 50,"C": 100,"D": 500,"M": 1000}
        
        for c in reversed(s):
            val = romanDict[c];
            if localMax <= val:
                retInt += val
                localMax = val
            else:
                retInt -= val
        return retInt
